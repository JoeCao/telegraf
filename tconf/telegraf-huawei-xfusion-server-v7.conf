# Huawei xFusion Server v7 Telegraf Configuration
# Based on Zabbix template: Huawei xFusion Server v7
# Creator: 王磊
# Creation Date: 2025-06-17
# Applicable Model: 适配ibmc版本3.07.03.39，实测华为超聚变 8600v7
# Based on MIB: 2288HV6-16DIMM-iBMC_3.07.03.39_MIB（XFUSION-SERVER-iBMC-MIB.mib）

# Global agent configuration
[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  hostname = ""
  omit_hostname = false

# ====================
# SNMP 基础系统监控
# ====================
[[inputs.snmp]]
  # SNMP 连接配置
  agents = ["udp://192.168.1.100:161"]  # 替换为实际服务器IP
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"  # 替换为实际社区名
  max_repetitions = 10

  # 全局标签
  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    vendor = "huawei"
    model = "v7"

  # ====================
  # 系统基础信息
  # ====================
  [[inputs.snmp.field]]
    name = "system_contact"
    oid = "1.3.6.1.2.1.1.4.0"
    conversion = "string"

  [[inputs.snmp.field]]
    name = "system_description"
    oid = "1.3.6.1.2.1.1.1.0"
    conversion = "string"

  [[inputs.snmp.field]]
    name = "system_location"
    oid = "1.3.6.1.2.1.1.6.0"
    conversion = "string"

  [[inputs.snmp.field]]
    name = "system_name"
    oid = "1.3.6.1.2.1.1.5.0"
    conversion = "string"

  [[inputs.snmp.field]]
    name = "system_objectid"
    oid = "1.3.6.1.2.1.1.2.0"
    conversion = "string"

  [[inputs.snmp.field]]
    name = "system_uptime"
    oid = "1.3.6.1.2.1.1.3.0"
    conversion = "float"

  [[inputs.snmp.field]]
    name = "device_name"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.1.6.0"
    conversion = "string"

  [[inputs.snmp.field]]
    name = "hardware_serial_number"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.1.7.0"
    conversion = "string"

  # ====================
  # 整体健康状态监控
  # ====================
  [[inputs.snmp.field]]
    name = "overall_health_status"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.1.1.0"
    conversion = "int"

  [[inputs.snmp.field]]
    name = "power_on_state"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.1.12.0"
    conversion = "int"

  # ====================
  # 硬件组件健康状态
  # ====================
  [[inputs.snmp.field]]
    name = "cpu_health_status"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.15.1.0"
    conversion = "int"

  [[inputs.snmp.field]]
    name = "memory_health_status"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.16.1.0"
    conversion = "int"

  [[inputs.snmp.field]]
    name = "disk_health_status"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.18.1.0"
    conversion = "int"

  [[inputs.snmp.field]]
    name = "fan_health_status"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.8.3.0"
    conversion = "int"

  [[inputs.snmp.field]]
    name = "power_supply_health_status"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.6.1.0"
    conversion = "int"

  [[inputs.snmp.field]]
    name = "temperature_health_status"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.26.1.0"
    conversion = "int"

  [[inputs.snmp.field]]
    name = "pcie_device_health_status"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.24.1.0"
    conversion = "int"

  # ====================
  # 系统性能指标
  # ====================
  [[inputs.snmp.field]]
    name = "cpu_utilization"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.1.23.0"
    conversion = "float"

  [[inputs.snmp.field]]
    name = "cpu_idle"
    oid = "1.3.6.1.4.1.2021.11.11.0"
    conversion = "float"

  [[inputs.snmp.field]]
    name = "memory_utilization"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.1.25.0"
    conversion = "float"

  [[inputs.snmp.field]]
    name = "memory_total"
    oid = "1.3.6.1.4.1.2021.4.5.0"
    conversion = "float"

  [[inputs.snmp.field]]
    name = "memory_free"
    oid = "1.3.6.1.4.1.2021.4.6.0"
    conversion = "float"

  [[inputs.snmp.field]]
    name = "system_power_consumption"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.20.4.0"
    conversion = "float"

  # ====================
  # 许可证和固件状态
  # ====================
  [[inputs.snmp.field]]
    name = "certificate_expiration"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.31.1.14.0"
    conversion = "string"

  [[inputs.snmp.field]]
    name = "firmware_upgrade_state"
    oid = "1.3.6.1.4.1.58132.2.235.1.1.30.2.0"
    conversion = "int"

  # ====================
  # SNMP 可用性监控
  # ====================

# ICMP ping 监控
[[inputs.ping]]
  urls = ["192.168.1.100"]  # 替换为实际服务器IP
  count = 3
  timeout = 1.0
  interface = ""

  [inputs.ping.tags]
    device_type = "huawei_xfusion_server"
    component = "network"

# ====================
# CPU 自动发现和监控
# ====================
[[inputs.snmp]]
  agents = ["udp://192.168.1.100:161"]
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"

  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    component = "cpu"

  # CPU 发现表
  [[inputs.snmp.table]]
    name = "huawei_cpu"
    inherit_tags = ["device_type", "component"]

    [[inputs.snmp.table.field]]
      name = "cpu_index"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.15.50.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "cpu_name"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.15.50.1.10"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "cpu_manufacturer"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.15.50.1.2"
      conversion = "string"

    [[inputs.snmp.table.field]]
      name = "cpu_status"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.15.50.1.6"
      conversion = "int"

# ====================
# 内存自动发现和监控
# ====================
[[inputs.snmp]]
  agents = ["udp://192.168.1.100:161"]
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"

  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    component = "memory"

  # 内存发现表
  [[inputs.snmp.table]]
    name = "huawei_memory"
    inherit_tags = ["device_type", "component"]

    [[inputs.snmp.table.field]]
      name = "memory_index"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.16.50.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "memory_name"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.16.50.1.10"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "memory_type"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.16.50.1.11"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "memory_manufacturer"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.16.50.1.3"
      conversion = "string"

    [[inputs.snmp.table.field]]
      name = "memory_size"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.16.50.1.4"
      conversion = "float"

    [[inputs.snmp.table.field]]
      name = "memory_serial_number"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.16.50.1.12"
      conversion = "string"

    [[inputs.snmp.table.field]]
      name = "memory_status"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.16.50.1.6"
      conversion = "int"

# ====================
# 物理磁盘自动发现和监控
# ====================
[[inputs.snmp]]
  agents = ["udp://192.168.1.100:161"]
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"

  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    component = "physicaldisk"

  # 物理磁盘发现表
  [[inputs.snmp.table]]
    name = "huawei_physicaldisk"
    inherit_tags = ["device_type", "component"]

    [[inputs.snmp.table.field]]
      name = "disk_index"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.18.50.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "disk_name"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.18.50.1.6"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "disk_manufacturer"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.18.50.1.9"
      conversion = "string"

    [[inputs.snmp.table.field]]
      name = "disk_serial_number"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.18.50.1.7"
      conversion = "string"

    [[inputs.snmp.table.field]]
      name = "disk_size"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.18.50.1.12"
      conversion = "float"

    [[inputs.snmp.table.field]]
      name = "disk_status"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.18.50.1.3"
      conversion = "int"

# ====================
# 磁盘阵列控制器发现和监控
# ====================
[[inputs.snmp]]
  agents = ["udp://192.168.1.100:161"]
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"

  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    component = "controller"

  # 磁盘阵列控制器发现表
  [[inputs.snmp.table]]
    name = "huawei_diskarray"
    inherit_tags = ["device_type", "component"]

    [[inputs.snmp.table.field]]
      name = "controller_index"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.36.50.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "controller_name"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.36.50.1.4"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "controller_status"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.36.50.1.7"
      conversion = "int"

    [[inputs.snmp.table.field]]
      name = "controller_bbu_status"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.36.50.1.18"
      conversion = "int"

# ====================
# 风扇自动发现和监控
# ====================
[[inputs.snmp]]
  agents = ["udp://192.168.1.100:161"]
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"

  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    component = "fan"

  # 风扇发现表
  [[inputs.snmp.table]]
    name = "huawei_fan"
    inherit_tags = ["device_type", "component"]

    [[inputs.snmp.table.field]]
      name = "fan_index"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.8.50.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "fan_name"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.8.50.1.7"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "fan_speed"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.8.50.1.2"
      conversion = "float"

    [[inputs.snmp.table.field]]
      name = "fan_status"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.8.50.1.4"
      conversion = "int"

# ====================
# 电源自动发现和监控
# ====================
[[inputs.snmp]]
  agents = ["udp://192.168.1.100:161"]
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"

  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    component = "power"

  # 电源发现表
  [[inputs.snmp.table]]
    name = "huawei_powersupply"
    inherit_tags = ["device_type", "component"]

    [[inputs.snmp.table.field]]
      name = "psu_index"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.6.50.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "psu_name"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.6.50.1.13"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "psu_manufacturer"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.6.50.1.2"
      conversion = "string"

    [[inputs.snmp.table.field]]
      name = "psu_serial_number"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.6.50.1.15"
      conversion = "string"

    [[inputs.snmp.table.field]]
      name = "psu_power"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.6.50.1.8"
      conversion = "float"

    [[inputs.snmp.table.field]]
      name = "psu_status"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.6.50.1.7"
      conversion = "int"

# ====================
# 温度传感器自动发现和监控
# ====================
[[inputs.snmp]]
  agents = ["udp://192.168.1.100:161"]
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"

  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    component = "temperature"

  # 温度传感器发现表
  [[inputs.snmp.table]]
    name = "huawei_temperature"
    inherit_tags = ["device_type", "component"]

    [[inputs.snmp.table.field]]
      name = "temp_index"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.26.50.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "temp_name"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.26.50.1.2"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "temp_value"
      oid = "1.3.6.1.4.1.58132.2.235.1.1.26.50.1.3"
      conversion = "float"

# ====================
# 网络接口自动发现和监控
# ====================
[[inputs.snmp]]
  agents = ["udp://192.168.1.100:161"]
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"

  [inputs.snmp.tags]
    device_type = "huawei_xfusion_server"
    component = "network"

  # 网络接口发现表
  [[inputs.snmp.table]]
    name = "huawei_network_interface"
    inherit_tags = ["device_type", "component"]

    [[inputs.snmp.table.field]]
      name = "interface_index"
      oid = "1.3.6.1.2.1.2.2.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "interface_name"
      oid = "1.3.6.1.2.1.31.1.1.1.1"
      conversion = "string"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "interface_type"
      oid = "1.3.6.1.2.1.2.2.1.3"
      conversion = "int"

    [[inputs.snmp.table.field]]
      name = "interface_admin_status"
      oid = "1.3.6.1.2.1.2.2.1.7"
      conversion = "int"

    [[inputs.snmp.table.field]]
      name = "interface_oper_status"
      oid = "1.3.6.1.2.1.2.2.1.8"
      conversion = "int"

    [[inputs.snmp.table.field]]
      name = "interface_speed"
      oid = "1.3.6.1.2.1.31.1.1.1.15"
      conversion = "float"

    [[inputs.snmp.table.field]]
      name = "interface_in_octets"
      oid = "1.3.6.1.2.1.31.1.1.1.6"
      conversion = "float"

    [[inputs.snmp.table.field]]
      name = "interface_out_octets"
      oid = "1.3.6.1.2.1.31.1.1.1.10"
      conversion = "float"

# ====================
# 数据处理器配置
# ====================

# 数学运算处理器 - 单位换算
[[processors.starlark]]
  source = '''
def apply(metric):
    # 内存单位转换: KB -> B
    if "memory_total" in metric.fields:
        metric.fields["memory_total"] = metric.fields["memory_total"] * 1024
    if "memory_free" in metric.fields:
        metric.fields["memory_free"] = metric.fields["memory_free"] * 1024

    # 内存大小转换: MB -> B (内存模块)
    if "memory_size" in metric.fields:
        metric.fields["memory_size"] = metric.fields["memory_size"] * 1048576

    # 磁盘大小转换: GB -> B
    if "disk_size" in metric.fields:
        metric.fields["disk_size"] = metric.fields["disk_size"] * 1073741824

    # 系统运行时间转换: 百分之一秒 -> 秒
    if "system_uptime" in metric.fields:
        metric.fields["system_uptime"] = metric.fields["system_uptime"] * 0.01

    # 温度值转换: 十分之一摄氏度 -> 摄氏度
    if "temp_value" in metric.fields:
        metric.fields["temp_value"] = metric.fields["temp_value"] * 0.1

    # 功耗单位转换: kWh -> Wh
    if "system_power_consumption" in metric.fields:
        metric.fields["system_power_consumption"] = metric.fields["system_power_consumption"] * 1000

    # 网络速度转换: Mbps -> bps
    if "interface_speed" in metric.fields:
        metric.fields["interface_speed"] = metric.fields["interface_speed"] * 1000000

    return metric
'''

# 枚举值映射处理器 - 健康状态
[[processors.enum]]
  [[processors.enum.mapping]]
    fields = ["overall_health_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["cpu_health_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["memory_health_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["disk_health_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["fan_health_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["power_supply_health_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["temperature_health_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["pcie_device_health_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  # 电源状态映射
  [[processors.enum.mapping]]
    fields = ["power_on_state"]
    [processors.enum.mapping.value_mappings]
      1 = "normalPowerOff"
      2 = "powerOn"
      3 = "forcedSystemReset"
      4 = "forcedPowerCycle"
      5 = "forcedPowerOff"

  # 网络接口状态映射
  [[processors.enum.mapping]]
    fields = ["interface_oper_status"]
    [processors.enum.mapping.value_mappings]
      1 = "up"
      2 = "down"
      3 = "testing"
      4 = "unknown"
      5 = "dormant"
      6 = "notPresent"
      7 = "lowerLayerDown"

  # 各组件状态映射 (CPU, 内存, 磁盘等)
  [[processors.enum.mapping]]
    fields = ["cpu_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["memory_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["disk_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["fan_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["psu_status"]
    [processors.enum.mapping.value_mappings]
      1 = "ok"
      2 = "minor"
      3 = "major"
      4 = "critical"
      5 = "absence"
      6 = "unknown"

  [[processors.enum.mapping]]
    fields = ["controller_status"]
    [processors.enum.mapping.value_mappings]
      0 = "ok"

  [[processors.enum.mapping]]
    fields = ["controller_bbu_status"]
    [processors.enum.mapping.value_mappings]
      0 = "ok"

# 输出配置 (示例 - 根据需要选择)
[[outputs.influxdb_v2]]
  urls = ["http://localhost:8086"]
  token = "your-token-here"
  organization = "your-org"
  bucket = "huawei_servers"

  # 数据保留策略
  [outputs.influxdb_v2.tagpass]
    device_type = ["huawei_xfusion_server"]

# 或者输出到文件进行调试
# [[outputs.file]]
#   files = ["/tmp/telegraf-huawei-xfusion.out"]
#   data_format = "json"
#   json_timestamp_units = "1ms"