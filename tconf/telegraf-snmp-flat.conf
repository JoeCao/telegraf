[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "30s"
  flush_jitter = "0s"

# SNMP 数据采集
[[inputs.snmp]]
  agents = ["localhost:161"]
  version = 2
  community = "public"
  interval = "30s"
  timeout = "5s"
  retries = 3

  # 系统信息
  [[inputs.snmp.field]]
    name = "system_description"
    oid = "1.3.6.1.2.1.1.1.0"

  [[inputs.snmp.field]]
    name = "system_uptime"
    oid = "1.3.6.1.2.1.1.3.0"

  [[inputs.snmp.field]]
    name = "system_name"
    oid = "1.3.6.1.2.1.1.5.0"

  [[inputs.snmp.field]]
    name = "interface_count"
    oid = "1.3.6.1.2.1.2.1.0"

  # 接口统计表
  [[inputs.snmp.table]]
    name = "interface"
    inherit_tags = ["hostname"]
    oid = "1.3.6.1.2.1.2.2"

    [[inputs.snmp.table.field]]
      name = "ifDescr"
      oid = "1.3.6.1.2.1.2.2.1.2"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "ifType"
      oid = "1.3.6.1.2.1.2.2.1.3"

    [[inputs.snmp.table.field]]
      name = "ifSpeed"
      oid = "1.3.6.1.2.1.2.2.1.5"

    [[inputs.snmp.table.field]]
      name = "ifAdminStatus"
      oid = "1.3.6.1.2.1.2.2.1.7"

    [[inputs.snmp.table.field]]
      name = "ifOperStatus"
      oid = "1.3.6.1.2.1.2.2.1.8"

    [[inputs.snmp.table.field]]
      name = "ifInOctets"
      oid = "1.3.6.1.2.1.2.2.1.10"

    [[inputs.snmp.table.field]]
      name = "ifOutOctets"
      oid = "1.3.6.1.2.1.2.2.1.16"

    [[inputs.snmp.table.field]]
      name = "ifInErrors"
      oid = "1.3.6.1.2.1.2.2.1.14"

    [[inputs.snmp.table.field]]
      name = "ifOutErrors"
      oid = "1.3.6.1.2.1.2.2.1.20"

    [[inputs.snmp.table.field]]
      name = "ifInDiscards"
      oid = "1.3.6.1.2.1.2.2.1.13"

    [[inputs.snmp.table.field]]
      name = "ifOutDiscards"
      oid = "1.3.6.1.2.1.2.2.1.19"

# 计算流量速率
[[aggregators.derivative]]
  namepass = ["interface"]
  period = "30s"
  suffix = "_rate"
  max_roll_over = 1
  fieldinclude = ["ifInOctets", "ifOutOctets"]

# 平铺化处理器 - 将数据转换为扁平结构
[[processors.starlark]]
  namepass = ["snmp", "interface"]

  source = '''
def apply(metric):
    current_timestamp = int(metric.time / 1000000000)

    if metric.name == "snmp":
        # 创建系统信息的扁平指标
        new_metric = deepcopy(metric)
        new_metric.name = "device_stats"

        # 转换系统运行时间（从 TimeTicks 转为秒）
        if "system_uptime" in new_metric.fields:
            new_metric.fields["system_uptime"] = int(new_metric.fields["system_uptime"] / 100)

        return new_metric

    if metric.name == "interface":
        # 为每个接口创建扁平的指标
        if_descr = metric.tags.get("ifDescr", "unknown")

        # 只处理主要接口，跳过环回接口
        if if_descr == "lo":
            return None

        new_metric = deepcopy(metric)
        new_metric.name = "interface_stats"

        # 添加接口名称到字段中
        new_metric.fields["interface_name"] = if_descr

        # 计算接口状态（1=UP, 0=DOWN）
        new_metric.fields["interface_active"] = 1 if metric.fields.get("ifOperStatus", 0) == 1 else 0

        # 计算总错误数
        in_errors = metric.fields.get("ifInErrors", 0)
        out_errors = metric.fields.get("ifOutErrors", 0)
        in_discards = metric.fields.get("ifInDiscards", 0)
        out_discards = metric.fields.get("ifOutDiscards", 0)
        new_metric.fields["total_errors"] = in_errors + out_errors + in_discards + out_discards

        # 转换速度单位为 Mbps
        if "ifSpeed" in new_metric.fields:
            new_metric.fields["interface_bandwidth_mbps"] = float(new_metric.fields["ifSpeed"] / 1000000)

        # 重命名字段以符合物模型规范
        field_mapping = {
            "ifInOctets": "inbound_bytes",
            "ifOutOctets": "outbound_bytes",
            "ifInOctets_rate": "inbound_rate_bps",
            "ifOutOctets_rate": "outbound_rate_bps",
            "ifInErrors": "inbound_errors",
            "ifOutErrors": "outbound_errors",
            "ifInDiscards": "inbound_discards",
            "ifOutDiscards": "outbound_discards"
        }

        for old_field, new_field in field_mapping.items():
            if old_field in new_metric.fields:
                new_metric.fields[new_field] = new_metric.fields[old_field]
                new_metric.fields.pop(old_field)

        # 转换速率为 Mbps
        if "inbound_rate_bps" in new_metric.fields:
            new_metric.fields["inbound_rate_mbps"] = float(new_metric.fields["inbound_rate_bps"] * 8 / 1000000)
        if "outbound_rate_bps" in new_metric.fields:
            new_metric.fields["outbound_rate_mbps"] = float(new_metric.fields["outbound_rate_bps"] * 8 / 1000000)

        return new_metric

    return None
'''

# 输出到文件（调试用）
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
  namepass = ["device_stats", "interface_stats"]

# 可选：输出到 InfluxDB
# [[outputs.influxdb_v2]]
#   urls = ["http://localhost:8086"]
#   token = "your_token_here"
#   organization = "your_org"
#   bucket = "telegraf"
#   namepass = ["device_stats", "interface_stats"]