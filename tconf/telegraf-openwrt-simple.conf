[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "10s"
  flush_interval = "60s"
  flush_jitter = "10s"

# OpenWrt路由器 SSH 数据采集 - 简化版本
# 减少并发连接，增加超时时间

# CPU使用率
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 -o ServerAliveInterval=5 root@192.168.61.1 'cat /proc/stat | head -1'"
  ]
  timeout = "30s"
  data_format = "grok"
  grok_patterns = [
    "%{WORD:cpu_name} %{NUMBER:user:int} %{NUMBER:nice:int} %{NUMBER:system:int} %{NUMBER:idle:int} %{NUMBER:iowait:int} %{NUMBER:irq:int} %{NUMBER:softirq:int}"
  ]
  name_override = "openwrt_cpu"
  interval = "60s"

# 系统负载
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 root@192.168.61.1 'cat /proc/loadavg'"
  ]
  timeout = "30s"
  data_format = "grok"
  grok_patterns = [
    "%{NUMBER:load1:float} %{NUMBER:load5:float} %{NUMBER:load15:float} %{NUMBER:running_processes:int}/%{NUMBER:total_processes:int} %{NUMBER:last_pid:int}"
  ]
  name_override = "openwrt_load"
  interval = "60s"

# 内存使用
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 root@192.168.61.1 'free | grep Mem'"
  ]
  timeout = "30s"
  data_format = "grok"
  grok_patterns = [
    "Mem: %{NUMBER:total:int} %{NUMBER:used:int} %{NUMBER:free:int} %{NUMBER:shared:int} %{NUMBER:buffers:int} %{NUMBER:cached:int}"
  ]
  name_override = "openwrt_memory"
  interval = "60s"

# WiFi客户端数量（简单版本）
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 root@192.168.61.1 'iwinfo 2>/dev/null | grep -c \"Access Point\"'"
  ]
  timeout = "30s"
  data_format = "value"
  data_type = "integer"
  name_override = "openwrt_wifi_clients"
  interval = "60s"

# 数据处理：CPU使用率计算
[[processors.starlark]]
  namepass = ["openwrt_cpu"]
  source = '''
def apply(metric):
    if metric.name == "openwrt_cpu":
        user = metric.fields.get("user", 0)
        nice = metric.fields.get("nice", 0)
        system = metric.fields.get("system", 0)
        idle = metric.fields.get("idle", 0)
        iowait = metric.fields.get("iowait", 0)
        irq = metric.fields.get("irq", 0)
        softirq = metric.fields.get("softirq", 0)

        total = user + nice + system + idle + iowait + irq + softirq
        if total > 0:
            metric.fields["cpu_usage_percent"] = float((total - idle) * 100) / total
            metric.fields["cpu_idle_percent"] = float(idle * 100) / total

    return metric
'''

# 数据处理：内存使用率计算
[[processors.starlark]]
  namepass = ["openwrt_memory"]
  source = '''
def apply(metric):
    if metric.name == "openwrt_memory":
        total = metric.fields.get("total", 0)
        used = metric.fields.get("used", 0)
        free = metric.fields.get("free", 0)

        if total > 0:
            metric.fields["memory_usage_percent"] = float(used * 100) / total
            metric.fields["memory_total_mb"] = float(total) / 1024
            metric.fields["memory_used_mb"] = float(used) / 1024
            metric.fields["memory_free_mb"] = float(free) / 1024

    return metric
'''

# 调试输出
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"