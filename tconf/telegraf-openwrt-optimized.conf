[agent]
  interval = "120s"
  round_interval = true
  metric_batch_size = 100
  metric_buffer_limit = 1000
  collection_jitter = "30s"
  flush_interval = "120s"
  flush_jitter = "30s"

# OpenWrt路由器优化配置 - 减少并发连接，错开采集时间

# 第一组：系统基础指标（0秒启动）
[[inputs.exec]]
  commands = [
    "sshpass -p 'Lezhi123456' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=15 root@192.168.61.1 'cat /proc/stat | head -1'"
  ]
  timeout = "45s"
  data_format = "grok"
  grok_patterns = [
    "%{WORD:cpu_name} %{NUMBER:user:int} %{NUMBER:nice:int} %{NUMBER:system:int} %{NUMBER:idle:int} %{NUMBER:iowait:int} %{NUMBER:irq:int} %{NUMBER:softirq:int}"
  ]
  name_override = "openwrt_cpu"
  interval = "120s"

# 第二组：内存信息（20秒后启动）
[[inputs.exec]]
  commands = [
    "sshpass -p 'Lezhi123456' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=15 root@192.168.61.1 'free | grep Mem'"
  ]
  timeout = "45s"
  data_format = "grok"
  grok_patterns = [
    "Mem: %{NUMBER:total:int} %{NUMBER:used:int} %{NUMBER:free:int} %{NUMBER:shared:int} %{NUMBER:buffers:int} %{NUMBER:cached:int}"
  ]
  name_override = "openwrt_memory"
  interval = "120s"
  collection_jitter = "20s"

# 第三组：系统负载（40秒后启动）
[[inputs.exec]]
  commands = [
    "sshpass -p 'Lezhi123456' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=15 root@192.168.61.1 'cat /proc/loadavg'"
  ]
  timeout = "45s"
  data_format = "grok"
  grok_patterns = [
    "%{NUMBER:load1:float} %{NUMBER:load5:float} %{NUMBER:load15:float} %{NUMBER:running_processes:int}/%{NUMBER:total_processes:int} %{NUMBER:last_pid:int}"
  ]
  name_override = "openwrt_load"
  interval = "120s"
  collection_jitter = "40s"

# 第四组：磁盘使用（60秒后启动）
[[inputs.exec]]
  commands = [
    "sshpass -p 'Lezhi123456' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=15 root@192.168.61.1 'df -h | head -10'"
  ]
  timeout = "45s"
  data_format = "grok"
  grok_patterns = [
    "%{NOTSPACE:filesystem} %{NOTSPACE:size} %{NOTSPACE:used} %{NOTSPACE:available} %{NUMBER:used_percent:int}% %{GREEDYDATA:mount_point}"
  ]
  name_override = "openwrt_disk"
  interval = "180s"
  collection_jitter = "60s"

# 第五组：网络统计（80秒后启动）
[[inputs.exec]]
  commands = [
    "sshpass -p 'Lezhi123456' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=15 root@192.168.61.1 'cat /proc/net/dev | tail -n +3'"
  ]
  timeout = "45s"
  data_format = "grok"
  grok_patterns = [
    "%{NOTSPACE:interface}: %{NUMBER:rx_bytes:int} %{NUMBER:rx_packets:int} %{NUMBER:rx_errors:int} %{NUMBER:rx_drop:int} %{NUMBER:rx_fifo:int} %{NUMBER:rx_frame:int} %{NUMBER:rx_compressed:int} %{NUMBER:rx_multicast:int} %{NUMBER:tx_bytes:int} %{NUMBER:tx_packets:int} %{NUMBER:tx_errors:int} %{NUMBER:tx_drop:int} %{NUMBER:tx_fifo:int} %{NUMBER:tx_colls:int} %{NUMBER:tx_carrier:int} %{NUMBER:tx_compressed:int}"
  ]
  name_override = "openwrt_network"
  interval = "180s"
  collection_jitter = "80s"

# 第六组：DHCP租约（100秒后启动）
[[inputs.exec]]
  commands = [
    "sshpass -p 'Lezhi123456' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=15 root@192.168.61.1 'cat /var/dhcp.leases 2>/dev/null | wc -l'"
  ]
  timeout = "45s"
  data_format = "value"
  data_type = "integer"
  name_override = "openwrt_dhcp_leases"
  interval = "300s"
  collection_jitter = "100s"

# 综合系统信息（一次性获取多个指标）
[[inputs.exec]]
  commands = [
    "sshpass -p 'Lezhi123456' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=20 root@192.168.61.1 'echo \"UPTIME:\"; uptime; echo \"PROCESSES:\"; ps | wc -l; echo \"CONNTRACK:\"; cat /proc/sys/net/netfilter/nf_conntrack_count 2>/dev/null || echo 0; echo \"TEMP:\"; cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null || echo 0'"
  ]
  timeout = "60s"
  data_format = "logfmt"
  name_override = "openwrt_system_info"
  interval = "180s"
  collection_jitter = "90s"

# CPU使用率计算
[[processors.starlark]]
  namepass = ["openwrt_cpu"]
  source = '''
def apply(metric):
    if metric.name == "openwrt_cpu":
        user = metric.fields.get("user", 0)
        nice = metric.fields.get("nice", 0)
        system = metric.fields.get("system", 0)
        idle = metric.fields.get("idle", 0)
        iowait = metric.fields.get("iowait", 0)
        irq = metric.fields.get("irq", 0)
        softirq = metric.fields.get("softirq", 0)

        total = user + nice + system + idle + iowait + irq + softirq
        if total > 0:
            metric.fields["cpu_usage_percent"] = float((total - idle) * 100) / total
            metric.fields["cpu_idle_percent"] = float(idle * 100) / total
            metric.fields["cpu_user_percent"] = float(user * 100) / total
            metric.fields["cpu_system_percent"] = float(system * 100) / total

    return metric
'''

# 内存使用率计算
[[processors.starlark]]
  namepass = ["openwrt_memory"]
  source = '''
def apply(metric):
    if metric.name == "openwrt_memory":
        total = metric.fields.get("total", 0)
        used = metric.fields.get("used", 0)
        free = metric.fields.get("free", 0)

        if total > 0:
            metric.fields["memory_usage_percent"] = float(used * 100) / total
            metric.fields["memory_total_mb"] = float(total) / 1024
            metric.fields["memory_used_mb"] = float(used) / 1024
            metric.fields["memory_free_mb"] = float(free) / 1024

    return metric
'''

# 网络接口过滤（只处理主要接口）
[[processors.starlark]]
  namepass = ["openwrt_network"]
  source = '''
def apply(metric):
    if metric.name == "openwrt_network":
        interface = metric.tags.get("interface", "")
        # 只处理主要的网络接口
        if interface in ["eth0", "br-lan", "wlan0", "eth1"]:
            return metric
        else:
            return None
    return metric
'''

# 转换为OneNET格式
[[processors.starlark]]
  namepass = ["openwrt_cpu", "openwrt_memory", "openwrt_load", "openwrt_network", "openwrt_dhcp_leases", "openwrt_disk"]
  source = '''
def apply(metric):
    current_timestamp = int(metric.time / 1000000000)
    new_metric = deepcopy(metric)
    new_metric.name = "onenet_openwrt"

    params = {}

    # CPU指标
    if metric.name == "openwrt_cpu":
        if "cpu_usage_percent" in metric.fields:
            params["cpu_usage_percent"] = {
                "value": float(metric.fields["cpu_usage_percent"]),
                "time": current_timestamp
            }
        if "cpu_idle_percent" in metric.fields:
            params["cpu_idle_percent"] = {
                "value": float(metric.fields["cpu_idle_percent"]),
                "time": current_timestamp
            }

    # 内存指标
    elif metric.name == "openwrt_memory":
        if "memory_usage_percent" in metric.fields:
            params["memory_usage_percent"] = {
                "value": float(metric.fields["memory_usage_percent"]),
                "time": current_timestamp
            }
        if "memory_total_mb" in metric.fields:
            params["memory_total_mb"] = {
                "value": float(metric.fields["memory_total_mb"]),
                "time": current_timestamp
            }

    # 系统负载
    elif metric.name == "openwrt_load":
        if "load1" in metric.fields:
            params["system_load1"] = {
                "value": float(metric.fields["load1"]),
                "time": current_timestamp
            }
        if "total_processes" in metric.fields:
            params["total_processes"] = {
                "value": int(metric.fields["total_processes"]),
                "time": current_timestamp
            }

    # DHCP租约数
    elif metric.name == "openwrt_dhcp_leases":
        params["dhcp_lease_count"] = {
            "value": int(metric.fields.get("value", 0)),
            "time": current_timestamp
        }

    # 磁盘使用（只关注根分区）
    elif metric.name == "openwrt_disk":
        mount_point = metric.tags.get("mount_point", "")
        if "/" in mount_point:
            params["disk_used_percent"] = {
                "value": int(metric.fields.get("used_percent", 0)),
                "time": current_timestamp
            }

    # 网络接口
    elif metric.name == "openwrt_network":
        interface = metric.tags.get("interface", "unknown")
        if interface in ["eth0", "br-lan"]:  # 只处理主要接口
            params["net_" + interface + "_rx_bytes"] = {
                "value": int(metric.fields.get("rx_bytes", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_tx_bytes"] = {
                "value": int(metric.fields.get("tx_bytes", 0)),
                "time": current_timestamp
            }

    # 如果没有参数则跳过
    if not params:
        return None

    # 构建 OneNET 消息
    onenet_message = {
        "id": str(current_timestamp) + "_" + metric.name,
        "version": "1.0",
        "params": params
    }

    # 清空原有字段
    for key in list(new_metric.fields.keys()):
        new_metric.fields.pop(key)

    new_metric.fields["message"] = str(onenet_message)

    return new_metric
'''

# MQTT 输出到 OneNET 平台
[[outputs.mqtt]]
  servers = ["tcp://121.40.253.229:1883"]
  username = "KSrqzbRj"      # 需要修改为实际的产品ID
  password = "mmlfIxaKhYBQE0sv"      # 需要修改为实际的访问密钥
  client_id = "openwrt01"
  topic = "$SYS/KSrqzbRj/openwrt01/property/post"  # 需要修改产品ID

  namepass = ["onenet_openwrt"]

  # 使用模板格式，只输出 message 字段的值
  data_format = "template"
  template = "{{.Fields.message}}"

  keep_alive = 60
  timeout = "5s"
  qos = 1

# 调试输出
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
  namepass = ["onenet_openwrt"]