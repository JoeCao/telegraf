[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "30s"
  flush_jitter = "0s"

# OpenWrt路由器 SSH 数据采集
# 系统性能指标采集
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'cat /proc/stat | head -1'"
  ]
  timeout = "10s"
  data_format = "grok"
  grok_patterns = [
    "%{WORD:cpu_name} %{NUMBER:user:int} %{NUMBER:nice:int} %{NUMBER:system:int} %{NUMBER:idle:int} %{NUMBER:iowait:int} %{NUMBER:irq:int} %{NUMBER:softirq:int}"
  ]
  name_override = "openwrt_cpu"
  interval = "30s"

[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'cat /proc/loadavg'"
  ]
  timeout = "10s"
  data_format = "grok"
  grok_patterns = [
    "%{NUMBER:load1:float} %{NUMBER:load5:float} %{NUMBER:load15:float} %{NUMBER:running_processes:int}/%{NUMBER:total_processes:int} %{NUMBER:last_pid:int}"
  ]
  name_override = "openwrt_load"
  interval = "30s"

[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'free | grep Mem'"
  ]
  timeout = "10s"
  data_format = "grok"
  grok_patterns = [
    "Mem: %{NUMBER:total:int} %{NUMBER:used:int} %{NUMBER:free:int} %{NUMBER:shared:int} %{NUMBER:buffers:int} %{NUMBER:cached:int}"
  ]
  name_override = "openwrt_memory"
  interval = "30s"

[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'df -k | grep -v tmpfs | grep -v proc | tail -n +2'"
  ]
  timeout = "10s"
  data_format = "grok"
  grok_patterns = [
    "%{NOTSPACE:filesystem} %{NUMBER:total_kb:int} %{NUMBER:used_kb:int} %{NUMBER:available_kb:int} %{NUMBER:used_percent:int}%{GREEDYDATA} %{NOTSPACE:mount_point}"
  ]
  name_override = "openwrt_disk"
  interval = "30s"

# 网络接口统计
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'cat /proc/net/dev | tail -n +3'"
  ]
  timeout = "10s"
  data_format = "grok"
  grok_patterns = [
    "%{NOTSPACE:interface}: %{NUMBER:rx_bytes:int} %{NUMBER:rx_packets:int} %{NUMBER:rx_errors:int} %{NUMBER:rx_drop:int} %{NUMBER:rx_fifo:int} %{NUMBER:rx_frame:int} %{NUMBER:rx_compressed:int} %{NUMBER:rx_multicast:int} %{NUMBER:tx_bytes:int} %{NUMBER:tx_packets:int} %{NUMBER:tx_errors:int} %{NUMBER:tx_drop:int} %{NUMBER:tx_fifo:int} %{NUMBER:tx_colls:int} %{NUMBER:tx_carrier:int} %{NUMBER:tx_compressed:int}"
  ]
  name_override = "openwrt_network"
  interval = "30s"

# 系统运行时间和信息
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'uptime'"
  ]
  timeout = "10s"
  data_format = "grok"
  grok_patterns = [
    "%{TIME:current_time} up %{GREEDYDATA:uptime_str}, %{NUMBER:users:int} users?, load average: %{NUMBER:load1:float}, %{NUMBER:load5:float}, %{NUMBER:load15:float}"
  ]
  name_override = "openwrt_uptime"
  interval = "60s"

# WiFi接口信息（使用iwinfo命令）
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'iwinfo wlan0 info 2>/dev/null | grep -E \"(ESSID|Access Point|Mode|Channel|Tx-Power|Link Quality|Signal|Noise|Bit Rate)\"'"
  ]
  timeout = "10s"
  data_format = "logfmt"
  name_override = "openwrt_wifi_info"
  interval = "30s"

# WiFi关联客户端统计
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'iwinfo wlan0 assoclist 2>/dev/null | wc -l'"
  ]
  timeout = "10s"
  data_format = "value"
  data_type = "integer"
  name_override = "openwrt_wifi_clients"
  interval = "30s"

# DHCP客户端数量
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'cat /var/dhcp.leases 2>/dev/null | wc -l'"
  ]
  timeout = "10s"
  data_format = "value"
  data_type = "integer"
  name_override = "openwrt_dhcp_leases"
  interval = "30s"

# 防火墙连接跟踪
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'cat /proc/sys/net/netfilter/nf_conntrack_count 2>/dev/null'"
  ]
  timeout = "10s"
  data_format = "value"
  data_type = "integer"
  name_override = "openwrt_conntrack_count"
  interval = "30s"

[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'cat /proc/sys/net/netfilter/nf_conntrack_max 2>/dev/null'"
  ]
  timeout = "10s"
  data_format = "value"
  data_type = "integer"
  name_override = "openwrt_conntrack_max"
  interval = "60s"

# 系统温度（如果支持）
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null'"
  ]
  timeout = "10s"
  data_format = "value"
  data_type = "integer"
  name_override = "openwrt_temperature_raw"
  interval = "30s"

# 网络统计
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'cat /proc/net/netstat | grep TcpExt | head -1'"
  ]
  timeout = "10s"
  data_format = "logfmt"
  name_override = "openwrt_tcp_stats"
  interval = "60s"

# 进程数量统计
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'ps | wc -l'"
  ]
  timeout = "10s"
  data_format = "value"
  data_type = "integer"
  name_override = "openwrt_process_count"
  interval = "30s"

# DNS查询统计（dnsmasq）
[[inputs.exec]]
  commands = [
    "ssh -i /home/pi/.ssh/openwrt_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@192.168.61.1 'kill -USR1 $(pidof dnsmasq) 2>/dev/null; sleep 1; logread | tail -20 | grep \"queries forwarded\\|queries answered locally\" | tail -1'"
  ]
  timeout = "10s"
  data_format = "logfmt"
  name_override = "openwrt_dns_stats"
  interval = "60s"

# 数据处理：CPU使用率计算
[[processors.starlark]]
  namepass = ["openwrt_cpu"]
  source = '''
def apply(metric):
    if metric.name == "openwrt_cpu":
        user = metric.fields.get("user", 0)
        nice = metric.fields.get("nice", 0)
        system = metric.fields.get("system", 0)
        idle = metric.fields.get("idle", 0)
        iowait = metric.fields.get("iowait", 0)
        irq = metric.fields.get("irq", 0)
        softirq = metric.fields.get("softirq", 0)

        total = user + nice + system + idle + iowait + irq + softirq
        if total > 0:
            metric.fields["cpu_usage_percent"] = float((total - idle) * 100) / total
            metric.fields["cpu_idle_percent"] = float(idle * 100) / total
            metric.fields["cpu_user_percent"] = float(user * 100) / total
            metric.fields["cpu_system_percent"] = float(system * 100) / total
            metric.fields["cpu_iowait_percent"] = float(iowait * 100) / total

    return metric
'''

# 数据处理：内存使用率计算
[[processors.starlark]]
  namepass = ["openwrt_memory"]
  source = '''
def apply(metric):
    if metric.name == "openwrt_memory":
        total = metric.fields.get("total", 0)
        used = metric.fields.get("used", 0)
        free = metric.fields.get("free", 0)

        if total > 0:
            metric.fields["memory_usage_percent"] = float(used * 100) / total
            metric.fields["memory_free_percent"] = float(free * 100) / total
            metric.fields["memory_total_mb"] = float(total) / 1024
            metric.fields["memory_used_mb"] = float(used) / 1024
            metric.fields["memory_free_mb"] = float(free) / 1024

    return metric
'''

# 数据处理：温度值转换（从毫度转换为摄氏度）
[[processors.starlark]]
  namepass = ["openwrt_temperature_raw"]
  source = '''
def apply(metric):
    if metric.name == "openwrt_temperature_raw":
        temp_raw = metric.fields.get("value", 0)
        metric.fields["temperature_celsius"] = float(temp_raw) / 1000
        metric.name = "openwrt_temperature"

    return metric
'''

# 转换为 OneNET 格式
[[processors.starlark]]
  namepass = ["openwrt_cpu", "openwrt_memory", "openwrt_load", "openwrt_network", "openwrt_wifi_clients", "openwrt_dhcp_leases", "openwrt_conntrack_count", "openwrt_temperature", "openwrt_disk", "openwrt_process_count"]

  source = '''
def apply(metric):
    current_timestamp = int(metric.time / 1000000000)
    new_metric = deepcopy(metric)
    new_metric.name = "onenet_openwrt"

    params = {}

    # CPU指标
    if metric.name == "openwrt_cpu":
        if "cpu_usage_percent" in metric.fields:
            params["cpu_usage_percent"] = {
                "value": float(metric.fields["cpu_usage_percent"]),
                "time": current_timestamp
            }
        if "cpu_idle_percent" in metric.fields:
            params["cpu_idle_percent"] = {
                "value": float(metric.fields["cpu_idle_percent"]),
                "time": current_timestamp
            }
        if "cpu_user_percent" in metric.fields:
            params["cpu_user_percent"] = {
                "value": float(metric.fields["cpu_user_percent"]),
                "time": current_timestamp
            }
        if "cpu_system_percent" in metric.fields:
            params["cpu_system_percent"] = {
                "value": float(metric.fields["cpu_system_percent"]),
                "time": current_timestamp
            }

    # 内存指标
    elif metric.name == "openwrt_memory":
        if "memory_usage_percent" in metric.fields:
            params["memory_usage_percent"] = {
                "value": float(metric.fields["memory_usage_percent"]),
                "time": current_timestamp
            }
        if "memory_total_mb" in metric.fields:
            params["memory_total_mb"] = {
                "value": float(metric.fields["memory_total_mb"]),
                "time": current_timestamp
            }
        if "memory_used_mb" in metric.fields:
            params["memory_used_mb"] = {
                "value": float(metric.fields["memory_used_mb"]),
                "time": current_timestamp
            }
        if "memory_free_mb" in metric.fields:
            params["memory_free_mb"] = {
                "value": float(metric.fields["memory_free_mb"]),
                "time": current_timestamp
            }

    # 系统负载
    elif metric.name == "openwrt_load":
        if "load1" in metric.fields:
            params["system_load1"] = {
                "value": float(metric.fields["load1"]),
                "time": current_timestamp
            }
        if "load5" in metric.fields:
            params["system_load5"] = {
                "value": float(metric.fields["load5"]),
                "time": current_timestamp
            }
        if "load15" in metric.fields:
            params["system_load15"] = {
                "value": float(metric.fields["load15"]),
                "time": current_timestamp
            }
        if "total_processes" in metric.fields:
            params["total_processes"] = {
                "value": int(metric.fields["total_processes"]),
                "time": current_timestamp
            }

    # 网络接口（只处理主要接口）
    elif metric.name == "openwrt_network":
        interface = metric.tags.get("interface", "unknown")
        if interface in ["eth0", "br-lan", "wlan0"]:
            params["net_" + interface + "_rx_bytes"] = {
                "value": int(metric.fields.get("rx_bytes", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_tx_bytes"] = {
                "value": int(metric.fields.get("tx_bytes", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_rx_packets"] = {
                "value": int(metric.fields.get("rx_packets", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_tx_packets"] = {
                "value": int(metric.fields.get("tx_packets", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_rx_errors"] = {
                "value": int(metric.fields.get("rx_errors", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_tx_errors"] = {
                "value": int(metric.fields.get("tx_errors", 0)),
                "time": current_timestamp
            }

    # WiFi客户端数
    elif metric.name == "openwrt_wifi_clients":
        params["wifi_client_count"] = {
            "value": int(metric.fields.get("value", 0)),
            "time": current_timestamp
        }

    # DHCP租约数
    elif metric.name == "openwrt_dhcp_leases":
        params["dhcp_lease_count"] = {
            "value": int(metric.fields.get("value", 0)),
            "time": current_timestamp
        }

    # 连接跟踪数
    elif metric.name == "openwrt_conntrack_count":
        params["conntrack_count"] = {
            "value": int(metric.fields.get("value", 0)),
            "time": current_timestamp
        }

    # 温度
    elif metric.name == "openwrt_temperature":
        if "temperature_celsius" in metric.fields:
            params["device_temperature"] = {
                "value": float(metric.fields["temperature_celsius"]),
                "time": current_timestamp
            }

    # 磁盘使用
    elif metric.name == "openwrt_disk":
        mount_point = metric.tags.get("mount_point", "/")
        if mount_point == "/":
            params["disk_total_kb"] = {
                "value": int(metric.fields.get("total_kb", 0)),
                "time": current_timestamp
            }
            params["disk_used_kb"] = {
                "value": int(metric.fields.get("used_kb", 0)),
                "time": current_timestamp
            }
            params["disk_available_kb"] = {
                "value": int(metric.fields.get("available_kb", 0)),
                "time": current_timestamp
            }
            params["disk_used_percent"] = {
                "value": int(metric.fields.get("used_percent", 0)),
                "time": current_timestamp
            }

    # 进程数
    elif metric.name == "openwrt_process_count":
        params["process_count"] = {
            "value": int(metric.fields.get("value", 0)),
            "time": current_timestamp
        }

    # 如果没有参数则跳过
    if not params:
        return None

    # 构建 OneNET 消息
    onenet_message = {
        "id": str(current_timestamp) + "_" + metric.name,
        "version": "1.0",
        "params": params
    }

    # 清空原有字段
    for key in list(new_metric.fields.keys()):
        new_metric.fields.pop(key)

    new_metric.fields["message"] = str(onenet_message)

    return new_metric
'''

# # MQTT 输出到 OneNET 平台
# [[outputs.mqtt]]
#   servers = ["tcp://121.40.253.229:1883"]
#   username = "your_product_id"      # 需要修改为实际的产品ID
#   password = "your_access_key"      # 需要修改为实际的访问密钥
#   client_id = "openwrt_router_001"
#   topic = "$SYS/your_product_id/openwrt_router_001/property/post"  # 需要修改产品ID

#   namepass = ["onenet_openwrt"]

#   # 使用模板格式，只输出 message 字段的值
#   data_format = "template"
#   template = "{{.Fields.message}}"

#   keep_alive = 60
#   timeout = "5s"
#   qos = 1

# 调试输出
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
  namepass = ["onenet_openwrt"]