[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "30s"
  flush_jitter = "0s"

# SNMP 数据采集
[[inputs.snmp]]
  agents = ["localhost:161"]
  version = 2
  community = "public"
  interval = "30s"
  timeout = "5s"
  retries = 3

  # 系统信息
  [[inputs.snmp.field]]
    name = "sysDescr"
    oid = "1.3.6.1.2.1.1.1.0"

  [[inputs.snmp.field]]
    name = "sysUptime"
    oid = "1.3.6.1.2.1.1.3.0"

  [[inputs.snmp.field]]
    name = "sysName"
    oid = "1.3.6.1.2.1.1.5.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "ifNumber"
    oid = "1.3.6.1.2.1.2.1.0"

  # 接口统计表
  [[inputs.snmp.table]]
    name = "interface"
    inherit_tags = ["hostname"]
    oid = "1.3.6.1.2.1.2.2"

    [[inputs.snmp.table.field]]
      name = "ifDescr"
      oid = "1.3.6.1.2.1.2.2.1.2"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "ifType"
      oid = "1.3.6.1.2.1.2.2.1.3"

    [[inputs.snmp.table.field]]
      name = "ifSpeed"
      oid = "1.3.6.1.2.1.2.2.1.5"

    [[inputs.snmp.table.field]]
      name = "ifAdminStatus"
      oid = "1.3.6.1.2.1.2.2.1.7"

    [[inputs.snmp.table.field]]
      name = "ifOperStatus"
      oid = "1.3.6.1.2.1.2.2.1.8"

    [[inputs.snmp.table.field]]
      name = "ifInOctets"
      oid = "1.3.6.1.2.1.2.2.1.10"

    [[inputs.snmp.table.field]]
      name = "ifOutOctets"
      oid = "1.3.6.1.2.1.2.2.1.16"

    [[inputs.snmp.table.field]]
      name = "ifInErrors"
      oid = "1.3.6.1.2.1.2.2.1.14"

    [[inputs.snmp.table.field]]
      name = "ifOutErrors"
      oid = "1.3.6.1.2.1.2.2.1.20"

    [[inputs.snmp.table.field]]
      name = "ifInDiscards"
      oid = "1.3.6.1.2.1.2.2.1.13"

    [[inputs.snmp.table.field]]
      name = "ifOutDiscards"
      oid = "1.3.6.1.2.1.2.2.1.19"

# 计算流量速率
[[aggregators.derivative]]
  namepass = ["interface"]
  period = "30s"
  suffix = "_rate"
  max_roll_over = 1

# 转换为扁平化的 OneNET 格式
[[processors.starlark]]
  namepass = ["snmp", "interface"]

  source = '''
def apply(metric):
    current_timestamp = int(metric.time / 1000000000)

    if metric.name == "snmp":
        new_metric = deepcopy(metric)
        new_metric.name = "onenet_flat"

        # 系统信息 - 扁平化字段
        flat_data = {}

        if "sysDescr" in metric.fields:
            flat_data["system_description"] = str(metric.fields["sysDescr"])

        if "sysUptime" in metric.fields:
            flat_data["system_uptime"] = int(metric.fields["sysUptime"] / 100)

        if "ifNumber" in metric.fields:
            flat_data["interface_count"] = int(metric.fields["ifNumber"])

        if "sysName" in metric.tags:
            flat_data["system_name"] = str(metric.tags["sysName"])

        # 添加时间戳
        flat_data["timestamp"] = current_timestamp

        # 构建 OneNET 格式但扁平化
        onenet_message = {
            "id": str(current_timestamp),
            "version": "1.0",
            "params": {}
        }

        for key, value in flat_data.items():
            onenet_message["params"][key] = {
                "value": value,
                "time": current_timestamp
            }

        # 清空原有字段
        for key in list(new_metric.fields.keys()):
            new_metric.fields.pop(key)

        new_metric.fields["message"] = str(onenet_message)

        return new_metric

    if metric.name == "interface":
        # 为 eth0 接口生成扁平的聚合数据
        if_descr = metric.tags.get("ifDescr", "")
        if if_descr == "eth0":
            new_metric = deepcopy(metric)
            new_metric.name = "onenet_flat"

            # 扁平化接口数据
            flat_data = {}
            flat_data["active_interfaces"] = 1 if metric.fields.get("ifOperStatus", 0) == 1 else 0
            flat_data["total_inbound_bytes"] = metric.fields.get("ifInOctets", 0)
            flat_data["total_outbound_bytes"] = metric.fields.get("ifOutOctets", 0)
            flat_data["total_errors"] = metric.fields.get("ifInErrors", 0) + metric.fields.get("ifOutErrors", 0) + metric.fields.get("ifInDiscards", 0) + metric.fields.get("ifOutDiscards", 0)
            flat_data["uplink_interface_name"] = "eth0"
            flat_data["core_interface_name"] = "eth0"
            flat_data["uplink_bandwidth"] = float(metric.fields.get("ifSpeed", 0) / 1000000)

            # 速率数据（如果有）
            if "ifInOctets_rate" in metric.fields:
                flat_data["total_inbound_rate"] = float(metric.fields["ifInOctets_rate"] * 8 / 1000000)
            else:
                flat_data["total_inbound_rate"] = 0.0

            if "ifOutOctets_rate" in metric.fields:
                flat_data["total_outbound_rate"] = float(metric.fields["ifOutOctets_rate"] * 8 / 1000000)
            else:
                flat_data["total_outbound_rate"] = 0.0

            flat_data["uplink_inbound_rate"] = flat_data["total_inbound_rate"]
            flat_data["uplink_outbound_rate"] = flat_data["total_outbound_rate"]
            flat_data["core_inbound_rate"] = flat_data["total_inbound_rate"]
            flat_data["core_outbound_rate"] = flat_data["total_outbound_rate"]

            # 使用率计算（简化）
            flat_data["bandwidth_utilization"] = 0.0
            flat_data["packet_loss_rate"] = 0.0
            flat_data["uplink_utilization"] = 0.0
            flat_data["core_utilization"] = 0.0

            flat_data["timestamp"] = current_timestamp

            # 构建 OneNET 消息
            onenet_message = {
                "id": str(current_timestamp) + "_interface",
                "version": "1.0",
                "params": {}
            }

            for key, value in flat_data.items():
                onenet_message["params"][key] = {
                    "value": value,
                    "time": current_timestamp
                }

            # 清空原有字段
            for key in list(new_metric.fields.keys()):
                new_metric.fields.pop(key)

            new_metric.fields["message"] = str(onenet_message)

            return new_metric

    return None
'''

# MQTT 输出到 OneNET 平台 - 使用原始连接参数
[[outputs.mqtt]]
  servers = ["tcp://121.40.253.229:1883"]
  username = "zcddgDRs"
  password = "PDnqQoKju8DuFvpQ"
  client_id = "cisco001"
  topic = "$SYS/zcddgDRs/cisco001/property/post"

  namepass = ["onenet_flat"]

  # 使用模板格式，只输出 message 字段的值
  data_format = "template"
  template = "{{.Fields.message}}"

  keep_alive = 60
  timeout = "5s"
  qos = 1

# 调试输出
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
  namepass = ["onenet_flat"]