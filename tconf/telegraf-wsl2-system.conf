[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "30s"
  flush_jitter = "0s"

# CPU 使用率采集
[[inputs.cpu]]
  percpu = false
  totalcpu = true
  collect_cpu_time = false
  report_active = false

# 内存使用情况
[[inputs.mem]]

# 磁盘使用情况
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# 磁盘 IO 统计
[[inputs.diskio]]

# 网络接口统计
[[inputs.net]]
  interfaces = ["eth0", "wlan0"]

# 系统负载
[[inputs.system]]

# 进程统计
[[inputs.processes]]

# 内核统计
[[inputs.kernel]]

# 交换分区使用情况
[[inputs.swap]]

# Docker 容器统计（如果有安装 Docker）
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  source_tag = false
  container_name_include = []
  container_name_exclude = []
  timeout = "5s"
  docker_label_include = []
  docker_label_exclude = []

# 转换为 OneNET 格式
[[processors.starlark]]
  namepass = ["cpu", "mem", "disk", "diskio", "net", "system", "processes", "kernel", "swap", "docker", "docker_container_cpu", "docker_container_mem", "docker_container_blkio"]

  source = '''
def apply(metric):
    current_timestamp = int(metric.time / 1000000000)
    new_metric = deepcopy(metric)
    new_metric.name = "onenet_system"

    params = {}

    # CPU 指标
    if metric.name == "cpu":
        params["cpu_usage_idle"] = {
            "value": float(metric.fields.get("usage_idle", 0.0)),
            "time": current_timestamp
        }
        params["cpu_usage_user"] = {
            "value": float(metric.fields.get("usage_user", 0.0)),
            "time": current_timestamp
        }
        params["cpu_usage_system"] = {
            "value": float(metric.fields.get("usage_system", 0.0)),
            "time": current_timestamp
        }
        params["cpu_usage_total"] = {
            "value": float(100.0 - metric.fields.get("usage_idle", 0.0)),
            "time": current_timestamp
        }

    # 内存指标
    elif metric.name == "mem":
        total_mem = metric.fields.get("total", 1)
        used_mem = metric.fields.get("used", 0)
        available_mem = metric.fields.get("available", 0)

        params["memory_total_gb"] = {
            "value": float(total_mem / 1024 / 1024 / 1024),
            "time": current_timestamp
        }
        params["memory_used_gb"] = {
            "value": float(used_mem / 1024 / 1024 / 1024),
            "time": current_timestamp
        }
        params["memory_available_gb"] = {
            "value": float(available_mem / 1024 / 1024 / 1024),
            "time": current_timestamp
        }
        params["memory_usage_percent"] = {
            "value": float(metric.fields.get("used_percent", 0.0)),
            "time": current_timestamp
        }

    # 磁盘使用指标
    elif metric.name == "disk":
        if metric.tags.get("path") == "/":  # 只关注根分区
            params["disk_total_gb"] = {
                "value": float(metric.fields.get("total", 0) / 1024 / 1024 / 1024),
                "time": current_timestamp
            }
            params["disk_used_gb"] = {
                "value": float(metric.fields.get("used", 0) / 1024 / 1024 / 1024),
                "time": current_timestamp
            }
            params["disk_free_gb"] = {
                "value": float(metric.fields.get("free", 0) / 1024 / 1024 / 1024),
                "time": current_timestamp
            }
            params["disk_usage_percent"] = {
                "value": float(metric.fields.get("used_percent", 0.0)),
                "time": current_timestamp
            }

    # 磁盘 IO 指标
    elif metric.name == "diskio":
        params["disk_read_bytes"] = {
            "value": int(metric.fields.get("read_bytes", 0)),
            "time": current_timestamp
        }
        params["disk_write_bytes"] = {
            "value": int(metric.fields.get("write_bytes", 0)),
            "time": current_timestamp
        }
        params["disk_read_time"] = {
            "value": int(metric.fields.get("read_time", 0)),
            "time": current_timestamp
        }
        params["disk_write_time"] = {
            "value": int(metric.fields.get("write_time", 0)),
            "time": current_timestamp
        }

    # 网络接口指标
    elif metric.name == "net":
        interface = metric.tags.get("interface", "unknown")
        if interface in ["eth0", "wlan0"]:  # 只关注主要网络接口
            params["net_" + interface + "_bytes_sent"] = {
                "value": int(metric.fields.get("bytes_sent", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_bytes_recv"] = {
                "value": int(metric.fields.get("bytes_recv", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_packets_sent"] = {
                "value": int(metric.fields.get("packets_sent", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_packets_recv"] = {
                "value": int(metric.fields.get("packets_recv", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_err_in"] = {
                "value": int(metric.fields.get("err_in", 0)),
                "time": current_timestamp
            }
            params["net_" + interface + "_err_out"] = {
                "value": int(metric.fields.get("err_out", 0)),
                "time": current_timestamp
            }

    # 系统负载指标
    elif metric.name == "system":
        params["system_load1"] = {
            "value": float(metric.fields.get("load1", 0.0)),
            "time": current_timestamp
        }
        params["system_load5"] = {
            "value": float(metric.fields.get("load5", 0.0)),
            "time": current_timestamp
        }
        params["system_load15"] = {
            "value": float(metric.fields.get("load15", 0.0)),
            "time": current_timestamp
        }
        params["system_uptime"] = {
            "value": int(metric.fields.get("uptime", 0)),
            "time": current_timestamp
        }
        params["system_users"] = {
            "value": int(metric.fields.get("n_users", 0)),
            "time": current_timestamp
        }

    # 进程统计
    elif metric.name == "processes":
        params["processes_total"] = {
            "value": int(metric.fields.get("total", 0)),
            "time": current_timestamp
        }
        params["processes_running"] = {
            "value": int(metric.fields.get("running", 0)),
            "time": current_timestamp
        }
        params["processes_sleeping"] = {
            "value": int(metric.fields.get("sleeping", 0)),
            "time": current_timestamp
        }
        params["processes_zombies"] = {
            "value": int(metric.fields.get("zombies", 0)),
            "time": current_timestamp
        }

    # 交换分区
    elif metric.name == "swap":
        params["swap_total_gb"] = {
            "value": float(metric.fields.get("total", 0) / 1024 / 1024 / 1024),
            "time": current_timestamp
        }
        params["swap_used_gb"] = {
            "value": float(metric.fields.get("used", 0) / 1024 / 1024 / 1024),
            "time": current_timestamp
        }
        params["swap_usage_percent"] = {
            "value": float(metric.fields.get("used_percent", 0.0)),
            "time": current_timestamp
        }

    # Docker 容器统计
    elif metric.name in ["docker", "docker_container_cpu", "docker_container_mem", "docker_container_blkio"]:
        container_name = metric.tags.get("container_name", "unknown")

        if metric.name == "docker_container_cpu":
            params["docker_" + container_name + "_cpu_percent"] = {
                "value": float(metric.fields.get("usage_percent", 0.0)),
                "time": current_timestamp
            }
        elif metric.name == "docker_container_mem":
            params["docker_" + container_name + "_memory_usage_mb"] = {
                "value": float(metric.fields.get("usage", 0) / 1024 / 1024),
                "time": current_timestamp
            }
            params["docker_" + container_name + "_memory_limit_mb"] = {
                "value": float(metric.fields.get("limit", 0) / 1024 / 1024),
                "time": current_timestamp
            }

    # 如果没有参数则跳过
    if not params:
        return None

    # 构建 OneNET 消息
    onenet_message = {
        "id": str(current_timestamp) + "_" + metric.name,
        "version": "1.0",
        "params": params
    }

    # 清空原有字段
    for key in list(new_metric.fields.keys()):
        new_metric.fields.pop(key)

    new_metric.fields["message"] = str(onenet_message)

    return new_metric
'''

# MQTT 输出到 OneNET 平台
[[outputs.mqtt]]
  servers = ["tcp://121.40.253.229:1883"]
  username = "OlVjezRn"
  password = "CRAw4po5nVqHC26x"
  client_id = "wsl2_system"
  topic = "$SYS/OlVjezRn/wsl2_system/property/post"

  namepass = ["onenet_system"]

  # 使用模板格式，只输出 message 字段的值
  data_format = "template"
  template = "{{.Fields.message}}"

  keep_alive = 60
  timeout = "5s"
  qos = 1

# 调试输出
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
  namepass = ["onenet_system"]