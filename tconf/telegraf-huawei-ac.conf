[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "30s"
  flush_jitter = "0s"

# Huawei AC SNMP 数据采集
[[inputs.snmp]]
  agents = ["192.168.1.100:161"]  # 华为AC的IP地址，需要修改为实际地址
  version = 2
  community = "public"
  interval = "30s"
  timeout = "10s"
  retries = 3

  # 系统基础信息
  [[inputs.snmp.field]]
    name = "system_contact"
    oid = "1.3.6.1.2.1.1.4.0"

  [[inputs.snmp.field]]
    name = "system_description"
    oid = "1.3.6.1.2.1.1.1.0"

  [[inputs.snmp.field]]
    name = "system_location"
    oid = "1.3.6.1.2.1.1.6.0"

  [[inputs.snmp.field]]
    name = "system_name"
    oid = "1.3.6.1.2.1.1.5.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "system_object_id"
    oid = "1.3.6.1.2.1.1.2.0"

  [[inputs.snmp.field]]
    name = "system_uptime"
    oid = "1.3.6.1.2.1.1.3.0"

  # AC 特有指标
  [[inputs.snmp.field]]
    name = "ac_2.4g_terminals"
    oid = "1.3.6.1.4.1.2011.6.139.12.1.2.5.0"

  [[inputs.snmp.field]]
    name = "ac_5g_terminals"
    oid = "1.3.6.1.4.1.2011.6.139.12.1.2.6.0"

  [[inputs.snmp.field]]
    name = "ac_ap_total"
    oid = "1.3.6.1.4.1.2011.6.139.12.1.5.7.0"

  [[inputs.snmp.field]]
    name = "ac_current_stations"
    oid = "1.3.6.1.4.1.2011.6.139.12.1.2.2.0"

  [[inputs.snmp.field]]
    name = "ac_max_ap_number"
    oid = "1.3.6.1.4.1.2011.6.139.12.1.1.2.0"

  [[inputs.snmp.field]]
    name = "ac_max_station_number"
    oid = "1.3.6.1.4.1.2011.6.139.12.1.1.3.0"

  [[inputs.snmp.field]]
    name = "ac_ap_normal_ratio"
    oid = "1.3.6.1.4.1.2011.6.139.12.1.5.1.0"

  [[inputs.snmp.field]]
    name = "ac_joint_ap_number"
    oid = "1.3.6.1.4.1.2011.6.139.12.1.2.1.0"

# CPU 使用率 - 使用发现规则获取所有 CPU 的平均值
[[inputs.snmp.table]]
  name = "cpu_usage"
  inherit_tags = ["hostname"]
  oid = "1.3.6.1.4.1.2011.5.25.31.1.1.1.1"

  [[inputs.snmp.table.field]]
    name = "cpu_util"
    oid = "1.3.6.1.4.1.2011.5.25.31.1.1.1.1.5"

# 内存使用率 - 使用发现规则获取所有内存的平均值
[[inputs.snmp.table]]
  name = "memory_usage"
  inherit_tags = ["hostname"]
  oid = "1.3.6.1.4.1.2011.5.25.31.1.1.1.1"

  [[inputs.snmp.table.field]]
    name = "memory_util"
    oid = "1.3.6.1.4.1.2011.5.25.31.1.1.1.1.7"

# AP 发现和状态监控
[[inputs.snmp.table]]
  name = "ap_info"
  inherit_tags = ["hostname"]
  oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1"

  [[inputs.snmp.table.field]]
    name = "ap_name"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.4"
    is_tag = true

  [[inputs.snmp.table.field]]
    name = "ap_status"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.6"

  [[inputs.snmp.table.field]]
    name = "ap_ip_address"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.13"

  [[inputs.snmp.table.field]]
    name = "ap_client_count"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.44"

  [[inputs.snmp.table.field]]
    name = "ap_cpu_util"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.41"

  [[inputs.snmp.table.field]]
    name = "ap_memory_util"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.40"

  [[inputs.snmp.table.field]]
    name = "ap_temperature"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.43"

  [[inputs.snmp.table.field]]
    name = "ap_uptime"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.21"

  [[inputs.snmp.table.field]]
    name = "ap_wireless_in_bytes"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.59"

  [[inputs.snmp.table.field]]
    name = "ap_wireless_out_bytes"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.58"

  [[inputs.snmp.table.field]]
    name = "ap_ethernet_in_bytes"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.60"

  [[inputs.snmp.table.field]]
    name = "ap_ethernet_out_bytes"
    oid = "1.3.6.1.4.1.2011.6.139.13.3.3.1.61"

# 网络接口发现和监控
[[inputs.snmp.table]]
  name = "interface"
  inherit_tags = ["hostname"]
  oid = "1.3.6.1.2.1.2.2"

  [[inputs.snmp.table.field]]
    name = "if_name"
    oid = "1.3.6.1.2.1.31.1.1.1.1"
    is_tag = true

  [[inputs.snmp.table.field]]
    name = "if_descr"
    oid = "1.3.6.1.2.1.2.2.1.2"
    is_tag = true

  [[inputs.snmp.table.field]]
    name = "if_type"
    oid = "1.3.6.1.2.1.2.2.1.3"

  [[inputs.snmp.table.field]]
    name = "if_admin_status"
    oid = "1.3.6.1.2.1.2.2.1.7"

  [[inputs.snmp.table.field]]
    name = "if_oper_status"
    oid = "1.3.6.1.2.1.2.2.1.8"

  [[inputs.snmp.table.field]]
    name = "if_speed"
    oid = "1.3.6.1.2.1.31.1.1.1.15"

  [[inputs.snmp.table.field]]
    name = "if_in_octets"
    oid = "1.3.6.1.2.1.31.1.1.1.6"

  [[inputs.snmp.table.field]]
    name = "if_out_octets"
    oid = "1.3.6.1.2.1.31.1.1.1.10"

# 风扇状态监控
[[inputs.snmp.table]]
  name = "fan_status"
  inherit_tags = ["hostname"]
  oid = "1.3.6.1.4.1.2011.5.25.31.1.1.10.1"

  [[inputs.snmp.table.field]]
    name = "fan_speed"
    oid = "1.3.6.1.4.1.2011.5.25.31.1.1.10.1.5"

  [[inputs.snmp.table.field]]
    name = "fan_state"
    oid = "1.3.6.1.4.1.2011.5.25.31.1.1.10.1.7"

# 电源状态监控
[[inputs.snmp.table]]
  name = "power_status"
  inherit_tags = ["hostname"]
  oid = "1.3.6.1.4.1.2011.5.25.31.1.1.18.1"

  [[inputs.snmp.table.field]]
    name = "power_state"
    oid = "1.3.6.1.4.1.2011.5.25.31.1.1.18.1.6"

# 温度传感器监控
[[inputs.snmp.table]]
  name = "temperature_sensors"
  inherit_tags = ["hostname"]
  oid = "1.3.6.1.4.1.2011.5.25.31.1.1.1.1"

  [[inputs.snmp.table.field]]
    name = "temperature_value"
    oid = "1.3.6.1.4.1.2011.5.25.31.1.1.1.1.11"

# 计算流量速率
[[aggregators.derivative]]
  namepass = ["interface", "ap_info"]
  period = "30s"
  max_roll_over = 1

  # 计算接口流量速率
  [[aggregators.derivative.fields]]
    field = "if_in_octets"
    dest = "if_in_bytes_per_sec"

  [[aggregators.derivative.fields]]
    field = "if_out_octets"
    dest = "if_out_bytes_per_sec"

  # 计算AP流量速率
  [[aggregators.derivative.fields]]
    field = "ap_wireless_in_bytes"
    dest = "ap_wireless_in_bps"

  [[aggregators.derivative.fields]]
    field = "ap_wireless_out_bytes"
    dest = "ap_wireless_out_bps"

  [[aggregators.derivative.fields]]
    field = "ap_ethernet_in_bytes"
    dest = "ap_ethernet_in_bps"

  [[aggregators.derivative.fields]]
    field = "ap_ethernet_out_bytes"
    dest = "ap_ethernet_out_bps"

# 计算平均值和聚合
[[aggregators.basicstats]]
  period = "30s"
  stats = ["mean", "sum", "count"]

  # CPU 使用率平均值
  [[aggregators.basicstats.fields]]
    field = "cpu_util"

  # 内存使用率平均值
  [[aggregators.basicstats.fields]]
    field = "memory_util"

# 转换为 OneNET 格式
[[processors.starlark]]
  namepass = ["snmp", "ap_info", "interface", "cpu_usage", "memory_usage", "fan_status", "power_status", "temperature_sensors"]

  source = '''
def apply(metric):
    current_timestamp = int(metric.time / 1000000000)
    new_metric = deepcopy(metric)
    new_metric.name = "onenet_huawei_ac"

    params = {}

    # 华为AC系统信息
    if metric.name == "snmp":
        if "system_contact" in metric.fields:
            params["system_contact"] = {
                "value": str(metric.fields["system_contact"]),
                "time": current_timestamp
            }
        if "system_description" in metric.fields:
            params["system_description"] = {
                "value": str(metric.fields["system_description"]),
                "time": current_timestamp
            }
        if "system_location" in metric.fields:
            params["system_location"] = {
                "value": str(metric.fields["system_location"]),
                "time": current_timestamp
            }
        if "system_name" in metric.fields:
            params["system_name"] = {
                "value": str(metric.fields["system_name"]),
                "time": current_timestamp
            }
        if "system_uptime" in metric.fields:
            params["system_uptime"] = {
                "value": int(metric.fields["system_uptime"] / 100),
                "time": current_timestamp
            }
        if "ac_2.4g_terminals" in metric.fields:
            params["ac_2_4g_terminals"] = {
                "value": int(metric.fields["ac_2.4g_terminals"]),
                "time": current_timestamp
            }
        if "ac_5g_terminals" in metric.fields:
            params["ac_5g_terminals"] = {
                "value": int(metric.fields["ac_5g_terminals"]),
                "time": current_timestamp
            }
        if "ac_ap_total" in metric.fields:
            params["ac_ap_total"] = {
                "value": int(metric.fields["ac_ap_total"]),
                "time": current_timestamp
            }
        if "ac_current_stations" in metric.fields:
            params["ac_current_stations"] = {
                "value": int(metric.fields["ac_current_stations"]),
                "time": current_timestamp
            }
        if "ac_max_ap_number" in metric.fields:
            params["ac_max_ap_number"] = {
                "value": int(metric.fields["ac_max_ap_number"]),
                "time": current_timestamp
            }
        if "ac_max_station_number" in metric.fields:
            params["ac_max_station_number"] = {
                "value": int(metric.fields["ac_max_station_number"]),
                "time": current_timestamp
            }
        if "ac_ap_normal_ratio" in metric.fields:
            params["ac_ap_normal_ratio"] = {
                "value": float(metric.fields["ac_ap_normal_ratio"]),
                "time": current_timestamp
            }
        if "ac_joint_ap_number" in metric.fields:
            params["ac_joint_ap_number"] = {
                "value": int(metric.fields["ac_joint_ap_number"]),
                "time": current_timestamp
            }

    # AP 信息
    elif metric.name == "ap_info":
        ap_name = metric.tags.get("ap_name", "unknown")
        prefix = "ap_" + ap_name + "_"

        if "ap_status" in metric.fields:
            params[prefix + "status"] = {
                "value": int(metric.fields["ap_status"]),
                "time": current_timestamp
            }
        if "ap_client_count" in metric.fields:
            params[prefix + "client_count"] = {
                "value": int(metric.fields["ap_client_count"]),
                "time": current_timestamp
            }
        if "ap_cpu_util" in metric.fields:
            params[prefix + "cpu_util"] = {
                "value": float(metric.fields["ap_cpu_util"]),
                "time": current_timestamp
            }
        if "ap_memory_util" in metric.fields:
            params[prefix + "memory_util"] = {
                "value": float(metric.fields["ap_memory_util"]),
                "time": current_timestamp
            }
        if "ap_temperature" in metric.fields:
            params[prefix + "temperature"] = {
                "value": float(metric.fields["ap_temperature"]),
                "time": current_timestamp
            }
        if "ap_uptime" in metric.fields:
            params[prefix + "uptime"] = {
                "value": int(metric.fields["ap_uptime"]),
                "time": current_timestamp
            }
        if "ap_wireless_in_bps" in metric.fields:
            params[prefix + "wireless_in_bps"] = {
                "value": float(metric.fields["ap_wireless_in_bps"] * 8),
                "time": current_timestamp
            }
        if "ap_wireless_out_bps" in metric.fields:
            params[prefix + "wireless_out_bps"] = {
                "value": float(metric.fields["ap_wireless_out_bps"] * 8),
                "time": current_timestamp
            }

    # 网络接口信息
    elif metric.name == "interface":
        if_name = metric.tags.get("if_name", "unknown")
        prefix = "interface_" + if_name + "_"

        if "if_oper_status" in metric.fields:
            params[prefix + "oper_status"] = {
                "value": int(metric.fields["if_oper_status"]),
                "time": current_timestamp
            }
        if "if_speed" in metric.fields:
            params[prefix + "speed_mbps"] = {
                "value": float(metric.fields["if_speed"] * 1000000),
                "time": current_timestamp
            }
        if "if_in_bytes_per_sec" in metric.fields:
            params[prefix + "in_bps"] = {
                "value": float(metric.fields["if_in_bytes_per_sec"] * 8),
                "time": current_timestamp
            }
        if "if_out_bytes_per_sec" in metric.fields:
            params[prefix + "out_bps"] = {
                "value": float(metric.fields["if_out_bytes_per_sec"] * 8),
                "time": current_timestamp
            }

    # CPU 使用率平均值
    elif metric.name == "cpu_usage":
        if "cpu_util_mean" in metric.fields:
            params["cpu_util_average"] = {
                "value": float(metric.fields["cpu_util_mean"]),
                "time": current_timestamp
            }

    # 内存使用率平均值
    elif metric.name == "memory_usage":
        if "memory_util_mean" in metric.fields:
            params["memory_util_average"] = {
                "value": float(metric.fields["memory_util_mean"]),
                "time": current_timestamp
            }

    # 风扇状态
    elif metric.name == "fan_status":
        fan_index = metric.tags.get("snmp_index", "unknown")
        prefix = "fan_" + fan_index + "_"

        if "fan_speed" in metric.fields:
            params[prefix + "speed"] = {
                "value": int(metric.fields["fan_speed"]),
                "time": current_timestamp
            }
        if "fan_state" in metric.fields:
            params[prefix + "state"] = {
                "value": int(metric.fields["fan_state"]),
                "time": current_timestamp
            }

    # 电源状态
    elif metric.name == "power_status":
        power_index = metric.tags.get("snmp_index", "unknown")
        prefix = "power_" + power_index + "_"

        if "power_state" in metric.fields:
            params[prefix + "state"] = {
                "value": int(metric.fields["power_state"]),
                "time": current_timestamp
            }

    # 温度传感器
    elif metric.name == "temperature_sensors":
        temp_index = metric.tags.get("snmp_index", "unknown")
        prefix = "temperature_" + temp_index + "_"

        if "temperature_value" in metric.fields:
            params[prefix + "value"] = {
                "value": float(metric.fields["temperature_value"]),
                "time": current_timestamp
            }

    # 如果没有参数则跳过
    if not params:
        return None

    # 构建 OneNET 消息
    onenet_message = {
        "id": str(current_timestamp) + "_" + metric.name,
        "version": "1.0",
        "params": params
    }

    # 清空原有字段
    for key in list(new_metric.fields.keys()):
        new_metric.fields.pop(key)

    new_metric.fields["message"] = str(onenet_message)

    return new_metric
'''

# ICMP Ping 监控
[[inputs.ping]]
  urls = ["192.168.1.100"]  # 华为AC的IP地址，需要修改为实际地址
  count = 3
  ping_timeout = 5.0
  interval = "30s"

# MQTT 输出到 OneNET 平台
[[outputs.mqtt]]
  servers = ["tcp://121.40.253.229:1883"]
  username = "your_product_id"      # 需要修改为实际的产品ID
  password = "your_access_key"      # 需要修改为实际的访问密钥
  client_id = "huawei_ac_001"
  topic = "$SYS/your_product_id/huawei_ac_001/property/post"  # 需要修改产品ID

  namepass = ["onenet_huawei_ac"]

  # 使用模板格式，只输出 message 字段的值
  data_format = "template"
  template = "{{.Fields.message}}"

  keep_alive = 60
  timeout = "5s"
  qos = 1

# 调试输出
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
  namepass = ["onenet_huawei_ac", "ping"]